# Video Analytics Application Documentation

## Introduction

The Video Analytics Application is a Python program designed to capture video frames from multiple cameras, process and store the frames, and log relevant information in a database. This document explains the purpose and functionality of the application, making it accessible to any user.

## Table of Contents
- [Installation](#installation)
- [Configuration](#configuration)
- [Overview of the Application](#overview-of-the-application)
- [Database Setup](#database-setup)
- [Camera Feeds](#camera-feeds)
- [Frame Processing and Storage](#frame-processing-and-storage)
- [Error Handling and Logging](#error-handling-and-logging)
- [Conclusion](#conclusion)

## Installation <a name="installation"></a>

Before using the Video Analytics Application, you need to ensure that you have the following dependencies installed:

- Python 3.x
- OpenCV (cv2)
- NumPy
- SQLite
- configparser (for configuration)
- json (for JSON processing)

You can install these dependencies using pip:

```bash
pip install opencv-python numpy
```

## Configuration <a name="configuration"></a>

The application's configuration is stored in a file named `config.ini`. You can adjust the following settings in this configuration file:

- `batch_duration`: The duration (in seconds) for each batch of frames.
- `log_file`: The path to the log file where application logs will be stored.
- `log_level`: The desired log level (e.g., INFO, WARNING, ERROR).

Make sure to configure these settings to match your requirements.

## Overview of the Application <a name="overview-of-the-application"></a>

The Video Analytics Application performs the following key tasks:

1. **Database Setup**: It sets up a SQLite database for storing batch information, such as starting frame ID, ending frame ID, and timestamp.

2. **Camera Feeds**: The application initializes one or more camera feeds, capturing frames from each camera. It also retrieves the frames per second (FPS) of each camera, or defaults to 25 FPS if unavailable.

3. **Frame Processing and Storage**: Frames captured from camera feeds are processed and saved as JPEG images in folders corresponding to each camera. For every second of video, the application generates a JSON object containing frame information and logs it.

4. **Error Handling and Logging**: The application includes error handling to capture and log exceptions that may occur during frame processing or data storage.

## Database Setup <a name="database-setup"></a>

The database is set up to store batch information, which includes:

- `batch_id`: An auto-incremented unique identifier for each batch.
- `starting_frame_id`: The frame ID where the batch started.
- `ending_frame_id`: The frame ID where the batch ended.
- `timestamp`: The timestamp indicating when the batch was created.

## Camera Feeds <a name="camera-feeds"></a>

The application supports multiple camera feeds. It initializes VideoCapture objects for each camera, checks if the cameras were opened successfully, and retrieves the FPS value for each camera. It also generates random geolocation information (latitude and longitude) for each camera.

## Frame Processing and Storage <a name="frame-processing-and-storage"></a>

- For each camera, a folder is created to store the captured frames as JPEG images. The folder structure is organized by camera name.

- The application captures frames from the camera feed continuously.

- For every second of video, it creates a JSON object containing frame information, including the camera ID, frame ID, geolocation, and timestamp.

- Each frame is saved as a JPEG image with a unique filename in the respective camera folder.

## Error Handling and Logging <a name="error-handling-and-logging"></a>

The application includes error handling mechanisms to capture and handle exceptions that may occur during frame processing, data storage, or transmission. Relevant information is logged for debugging purposes.

- Errors and exceptions are logged with the level specified in the configuration (INFO, WARNING, ERROR).

## Conclusion <a name="conclusion"></a>

The Video Analytics Application provides a robust framework for capturing, processing, and storing video frames from multiple camera feeds. It offers flexibility through configuration options and ensures reliable error handling and logging for debugging and monitoring. By following the installation and configuration guidelines, users can adapt this application to their specific video analytics needs.